import java.util.ArrayList;

/*
 * Print all powerSet
 * eg: i/p = "cat"
 * o/p = c,ca,ct,cta,cat,a,ac,at,atc,act,t,tc,ta,tca,tac
 */
public class PowerSet {

	public static void main(String[] args) {

		String str = "cat";

		ArrayList<String> result = new ArrayList<String>();
		ArrayList<String> powerSet = generatePowerSet(str, 0);
		System.out.println("PowerSet : " + powerSet);
		for (String sol : powerSet) {
			result.addAll(permutation(sol));
		}
		System.out.println("PowerSet with permutations : " + result);

	}

	/*
	 * Function to generate a power set of a string
	 */
	private static ArrayList<String> generatePowerSet(String str, int index) {

		ArrayList<String> allCombinations;
		
		if (index == str.length()) {
			// fully traversed add empty String to set
			// *** P.S the case is length() and not length-1
			allCombinations = new ArrayList<>();
			allCombinations.add("");
		} else {
			
			// recurssive call is the first thing
			// the list from the past string is added into the result set that will be 
			// returned for the next recussion
			allCombinations = generatePowerSet(str, index + 1);
			
			//get the char at this index to add it to all the sets return from the 
			// previous recurssion 
			Character currChar = str.charAt(index);
			
			// holder for adding the sets generated at this level
			ArrayList<String> clonedList = new ArrayList<>();
			
			// for each set returned from the previous recurssion 
			// append the currentChar to each of those sets
			for (String sol : allCombinations) {
				clonedList.add(sol + currChar);
			}
			// add the sets generated by adding the current char to the resut
			// effectively this hols all the previous sets and the new sets that
			// have been generated by appending the currentChar to previous sets
			allCombinations.addAll(clonedList);
		}

		return allCombinations;
	}
	
	/*
	 * Function to generate Permutations for a given String
	 */

	public static ArrayList<String> permutation(String str) {
		ArrayList<String> result = new ArrayList<String>();
		permute("", str, result);
		return result;
	}

	private static void permute(String prefix, String str,
			ArrayList<String> result) {

		if (str == null || str.length() == 0) {
			result.add(prefix);
		}
		for (int i = 0; i < str.length(); i++) {
			Character curr = str.charAt(i);
			permute(prefix + curr,
					str.substring(0, i) + str.substring(i + 1, str.length()),
					result);
		}
	}

}
