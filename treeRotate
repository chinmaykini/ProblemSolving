	public static Node treeRightRotate(Node root){
		if(root == null ) return null; 
		
		Node ckLeft = treeRightRotate(root.left);
		Node ckRight = treeRightRotate(root.right);
		
		if(ckLeft!=null){
			
			Node q = ckLeft.right;
			Node r = ckLeft.left;
			
			ckLeft.left = ckRight;
			root.right = q;
			root.left = r;
			ckLeft.right = root;
			
			return ckLeft;
		}
		
		return root;
	}

	@Override
	public TreeNode rotateUpsideDown(TreeNode root) {
		
		return rotateUpsideDown(root,null);
		
	}

	private TreeNode rotateUpsideDown(TreeNode currentRoot, TreeNode newRightChild) {

		if(currentRoot == null) return null;
//		if(newRightChild == null ) return currentRoot;

		TreeNode leftChild = currentRoot.left;
		TreeNode rightChild = currentRoot.right;
		
		TreeNode nextLevelRoot = null;
		if(leftChild!=null)
			nextLevelRoot = leftChild.left;
		
		if(rightChild!=null){
			leftChild.left = rightChild;
			leftChild.right = currentRoot;
			currentRoot.left = null;
			currentRoot.right = newRightChild;
			if(nextLevelRoot!=null)
				return rotateUpsideDown(nextLevelRoot,leftChild );
			
		} else {
			leftChild.right = currentRoot;
			currentRoot.left = null;
			currentRoot.right = newRightChild;
			if(nextLevelRoot!=null)
				return rotateUpsideDown(nextLevelRoot,leftChild );
			
		}
		
		return leftChild;

	}
